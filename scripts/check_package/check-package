#!/usr/bin/env bash

DIRECTORY=`dirname $0`

source $DIRECTORY/utils.bash

UNINSTALL=0

while getopts ":hu" option; do
  case "$option" in
    u)
      UNINSTALL=1
      shift "$((OPTIND-1))"
      ;;
    h)
      echo "Usage: [-u] <package_name>"
      echo "Run package check"
      echo -e "  -u\t\tUninstall procedure"
      echo -e "  -h\t\tShow help"
      exit 0
      ;;
esac
done

GITHUB_AUTH="claudusd:$TOKEN_GITHUB_COM"

if [ -f /etc/lsb-release ]; then
  source /etc/lsb-release
  DISTRIB_ID=$(echo "$DISTRIB_ID" | tr '[:upper:]' '[:lower:]')
fi

function preInstall() {
  echo -e "$(writeUnderline 'Pre install:')"

  for package in $PRE_PACKAGE_NAME
  do
    if [ -f $DIRECTORY/list/$package.dependency ]; then 
      source $DIRECTORY/list/$package.dependency
      echo -e "$(writeBold ${DEPENDENCY_NAME})  -  $DEPENDENCY_DESCRIPTION"
      for subPackage in $DEPENDENCY_PACKAGE_NAME
      do 
        checkAptPackageInstalled $subPackage
        if [ $? = 0 ]; then
          echo -e "$(writeGreen ${CHAR_PACKAGE}) apt install ${subPackage} $(writeItalic "(installed)" )"
        else
          echo -e "$(writeRed ${CHAR_PACKAGE}) apt install ${subPackage}";
        fi;
      done
      echo
      clean_dependency_vars
    else 
      checkAptPackageInstalled $package
      if [ $? = 0 ]; then
        echo -e " $(writeGreen ${CHAR_PACKAGE}) apt install ${package} $(writeItalic "(installed)" )"
      else
        echo -e " $(writeRed ${CHAR_PACKAGE}) apt install ${package}";
      fi;
    fi
  done
}

function uninstall() {
  if [ -f "$DIRECTORY/list/$NAME.post_install" ] || [ -f "$DIRECTORY/list/$NAME.pre_install" ]; then 
    echo -e "$(writeUnderline 'Uninstall:')"
  fi

  if [ -n "$INSTALL_DEB_URL" ]; then 
    echo "apt remove $NAME"
  elif [ -n "$UNINSTALL_COMMAND" ]; then
    echo "$UNINSTALL_COMMAND"
  elif [ -n "$GITHUB_REPO" ]; then
    uninstallGithub
  elif [ -n "$PIP_PACKAGE" ]; then
    installationFromPip
  else 
    echo "apt remove $PACKAGE_NAME $PACKAGE_NAME_EXTRA"
    if [ -n "$INSTALL_PPA" ]; then
      echo "add-apt-repository --remove $INSTALL_PPA"
      echo "apt update"
    elif [ -n "$INSTALL_REPOSITORY_URL" ]; then
      echo "rm /etc/apt/sources.list.d/$INSTALL_NAME.list"
      echo "apt update"
    fi
  fi
}

function installation() {
  if [ -f "$DIRECTORY/list/$NAME.post_install" ] || [ -f "$DIRECTORY/list/$NAME.pre_install" ]; then 
    echo -e "$(writeUnderline 'Install:')"
  fi

  if [ -n "$INSTALL_PACKAGE_REQUIRE" ]; then
    echo "apt install $INSTALL_PACKAGE_REQUIRE"
  fi

  if [ -n "$GPG_PUBLIC_KEYS" ]; then
    echo "gpg2 --recv-keys $GPG_PUBLIC_KEYS"
  fi

  if [ -n "$INSTALL_URL" ]; then
    echo "Installation page : $INSTALL_URL";
  elif [ -n "$INSTALL_DEB_URL" ]; then
    INSTALL_DEB_URL=$(rewriteUrl $INSTALL_DEB_URL)
    echo "curl -L '$INSTALL_DEB_URL' -o /tmp/$NAME.deb"
    echo "dpkg -i /tmp/$NAME.deb"
    echo "rm /tmp/$NAME.deb"
  elif [ -n "$ARCHIVE_URL" ]; then
    ARCHIVE_URL=$(rewriteUrl $ARCHIVE_URL)

    BIN_TO_MV=${INSTALL_NAME}
    if [ -n "$ARCHIVE_BIN_NAME" ]; then
      BIN_TO_MV=$ARCHIVE_BIN_NAME
    fi

    if [[ $ARCHIVE_URL == *zip ]]; then
      echo "curl -L '$ARCHIVE_URL' -o /tmp/$NAME.zip"
      echo "unzip /tmp/$NAME.zip -d /tmp/"
      echo "mv /tmp/$INSTALL_NAME $INSTALL_PATH/$INSTALL_NAME"
      echo "rm /tmp/$NAME.zip"
    fi

    if [[ $ARCHIVE_URL == *tar.gz ]]; then
      echo "curl -L '$ARCHIVE_URL' -o /tmp/$NAME.tar.gz"
      echo "tar xzf /tmp/$NAME.tar.gz -C /tmp"
      SUB_DIR_PATH=""
      if [ -n "$ARCHIVE_URL" ]; then 
        SUB_DIR_PATH=$ARCHIVE_SUB_PATH
      fi
      echo "rm -rf $INSTALL_PATH/*"
      echo "mv /tmp/$NAME$SUB_DIR_PATH/$BIN_TO_MV" $INSTALL_PATH
      echo "rm /tmp/$NAME.tar.gz"
      echo "rm -rf /tmp/$NAME"
      unset SUB_DIR_PATH
    fi
    echo "chmod +x $INSTALL_PATH/$BIN_TO_MV"
    unset BIN_TO_MV
  elif [ -n "$INSTALL_COMMAND" ]; then
    echo "$INSTALL_COMMAND"
  elif [ -n "$INSTALL_SOURCE" ]; then
    VERSION=$(githubLatestRelease $GITHUB_REPO)
    echo "curl -L https://github.com/$GITHUB_REPO/archive/$VERSION.tar.gz | tar xz -C $INSTALL_NAME --transform 's!^[^/]\+\($\|/\)!$INSTALL_NAME\1!' -C /tmp"
    if [ -n "$INSTALL_SUBDIR_PATH" ]; then
      echo "cd /tmp/$INSTALL_NAME/$INSTALL_SUBDIR_PATH"
    else
      echo "cd /tmp/$INSTALL_NAME"
    fi

    if [ "$INSTALL_SOURCE" == "go" ]; then
      echo "go build"
      echo "cp $INSTALL_NAME $DOT_FILE_PATH/bin/bin/"
    fi

    echo "rm -rf /tmp/$INSTALL_NAME/"
  elif [ -n "$GITHUB_REPO" ]; then
    URL=$(getGithuUrlPath)
    getCurlCommandFromUrl $URL
    unset URL
  elif [ -n "$PIP_PACKAGE" ]; then
    installationFromPip
  elif [ -n "$PACKAGE_NAME" ]; then
    if [ -n "$INSTALL_PPA" ]; then
        echo "add-apt-repository $INSTALL_PPA"
        echo "apt update"
    else
        if [ -n "$INSTALL_REPOSITORY_KEY" ]; then
            echo "$CHAR_KEY wget -q -O- $INSTALL_REPOSITORY_KEY | sudo apt-key add -"
        fi;
        if [ -n "$INSTALL_REPOSITORY_URL" ]; then
            if [ -z "$INSTALL_REPOSITORY_DISTRO" ]; then
                INSTALL_REPOSITORY_DISTRO=$(lsb_release -sc)
            fi
	          checkSourceListUpdate
            REPOSITORY_ARCH=""
            if [ -n "$INSTALL_REPOSITORY_ARCH" ]; then
              REPOSITORY_ARCH="[arch=$INSTALL_REPOSITORY_ARCH]"
            fi
	          if [ -z "$INSTALL_REPOSITORY_NAME" ]; then
	            INSTALL_REPOSITORY_NAME="$INSTALL_NAME"
	          fi
            echo "${CHAR_CARD_FILE_BOX}  sudo sh -c 'echo \"deb $REPOSITORY_ARCH $INSTALL_REPOSITORY_URL $INSTALL_REPOSITORY_DISTRO $INSTALL_REPOSITORY_COMPONENT\" > /etc/apt/sources.list.d/$INSTALL_REPOSITORY_NAME.list'"
            unset REPOSITORY_ARCH
	          echo "apt update"
        fi;
    fi

    echo "apt install $PACKAGE_NAME $PACKAGE_NAME_EXTRA"
  fi
}

function rewriteUrl() {
  local URL=$1
  if [ -n "$GITHUB_REPO" ]; then 
    LATEST_VERSION=$(githubLatestRelease $GITHUB_REPO)
    URL=$(echo $URL | sed "s/--VERSION--/$LATEST_VERSION/g")
  fi
  if [ -n "$VERSION_INFO_URL" ]; then
    LATEST_VERSION=$(apiLatestRelease $VERSION_INFO_URL $VERSION_INFO_JQ)
    URL=$(echo $URL | sed "s/--VERSION--/$LATEST_VERSION/g")
  fi
  echo $URL;
}

function checkVersionFromAPI() {
  LATEST_VERSION=$(apiLatestRelease $VERSION_INFO_URL $VERSION_INFO_JQ)
  CURRENT_VERSION=$(getVersion $INSTALL_NAME $VERSION_CLI_OPTIONS)
  compareVersion $CURRENT_VERSION $LATEST_VERSION
  if [ $? -eq 1 ]; then
    newVersionAvailable $INSTALL_NAME "$CURRENT_VERSION" "$LATEST_VERSION"
  fi
  unset LATEST_VERSION;
  unset CURRENT_VERSION;
}

function checkVersionFromGithub() {
  LATEST_VERSION=$(githubLatestRelease $GITHUB_REPO)
  CURRENT_VERSION=$(getVersion $INSTALL_NAME $VERSION_CLI_OPTIONS)
  compareVersion $CURRENT_VERSION $LATEST_VERSION
  if [ $? -eq 1 ]; then
    newVersionAvailable $INSTALL_NAME "$CURRENT_VERSION" "$LATEST_VERSION"
  fi
  unset LATEST_VERSION;
  unset CURRENT_VERSION;
}

function checkVersionFromPip() {
  LATEST_VERSION=$(pipLatestRelease $1)
  CURRENT_VERSION=$(getVersionPackagePip $1)
  compareVersion $CURRENT_VERSION $LATEST_VERSION
  if [ $? -eq 1 ]; then
    newVersionAvailable $1 "$CURRENT_VERSION" "$LATEST_VERSION"
  fi
  unset LATEST_VERSION;
  unset CURRENT_VERSION;
}

function getGithuUrlPath() {
  VERSION=$(githubLatestRelease $GITHUB_REPO)
  if [ -n "$GITHUB_RAW_PATH" ]; then
    echo "https://raw.githubusercontent.com/$GITHUB_REPO/$VERSION/$GITHUB_RAW_PATH"
  else
    echo "https://github.com/$GITHUB_REPO/releases/download/$VERSION/$GITHUB_RELEASE_NAME"
  fi
}

function getCurlCommandFromUrl() {
  BIN_PATH=$NAME;
  if [ -z $INSTALL_PATH ]; then
    BIN_PATH="$INSTALL_PATH/$NAME"
  fi
  BIN_PATH="$INSTALL_PATH/$NAME"
  if echo $1 | grep '.sh' &> /dev/null; then
    echo "curl -o- $1 | bash"
  elif echo $1 | grep '.gz' &> /dev/null; then
    echo echo "sh -c \"curl -L '$1' 2> /dev/null | gzip -d > $BIN_PATH\""
    echo "chmod +x $BIN_PATH"
  else
    echo "curl -L '$1' -o $BIN_PATH"
    echo "chmod +x $BIN_PATH"
  fi
  unset BIN_PATH
}

function uninstallGithub() {
  BIN_PATH="/usr/local/bin/$NAME"
  echo "rm $BIN_PATH"
  unset BIN_PATH
}

getVersionPackagePip() {
  INSTALL_DIR=$(pipPathDir $NAME)

  local VET=$($INSTALL_DIR/.venv/bin/pip list | grep "^$1 ")
  VET=($VET)
  echo ${VET[1]}
}

function installationFromPip() {
  VERSION=$(pipLatestRelease $PIP_PACKAGE)
  INSTALL_DIR=$(pipPathDir $NAME)
  if [ $UNINSTALL -eq 0 ]; then
    echo "python3 -m venv $INSTALL_DIR/.venv"
    echo "$INSTALL_DIR/.venv/bin/pip install $PIP_PACKAGE==$VERSION"
    if [ -n PIP_EXTRA_PACKAGE ]; then
      for package in $(echo $PIP_EXTRA_PACKAGE | tr ";" "\n"); do
        echo "$INSTALL_DIR/.venv/bin/pip install $package==$(pipLatestRelease $package)"
      done
    fi
    echo "echo -e '#!/usr/bin/env bash\nDIRECTORY=$INSTALL_DIR\nsource \$DIRECTORY/.venv/bin/activate\n\$DIRECTORY/.venv/bin/$INSTALL_NAME \$@' > $DOT_FILE_PATH/bin/pip_dir/$INSTALL_NAME"
    echo "chmod +x $DOT_FILE_PATH/bin/pip_dir/$INSTALL_NAME"
  else 
    echo "rm -r $INSTALL_DIR"
    echo "rm $DOT_FILE_PATH/bin/pip_dir/$INSTALL_NAME"
  fi
  unset INSTALL_DIR
  unset VERSION
}

function checkSourceListUpdate() {
  if [ -n "$INSTALL_REPOSITORY_URL" ]; then
    if [[ "$INSTALL_REPOSITORY_DISTRO" != $(lsb_release -sc) ]] && [[ "$INSTALL_REPOSITORY_DISTRO" != "stable" ]]; then
      RESULT=$(curl -s -o /dev/null -w "%{http_code}" "$INSTALL_REPOSITORY_URL/dists/$(lsb_release -sc)")
      if [ $RESULT -ne 404 ]; then
        echo -e "$(writeOrange $CHAR_WARNING) You can replace $(writeStrike $INSTALL_REPOSITORY_DISTRO) by $(lsb_release -sc)"
        INSTALL_REPOSITORY_DISTRO=$(lsb_release -sc)
      fi
    fi
  fi
}

function checkVersion() {
  if [ -n "$VERSION_INFO_URL" ]; then
    checkVersionFromAPI
  fi 
  if [ -n "$GITHUB_REPO" ]; then 
    checkVersionFromGithub $VERSION
  fi

  if [ -n "$PIP_PACKAGE" ]; then 
    checkVersionFromPip $PIP_PACKAGE
    if [ -n "$PIP_EXTRA_PACKAGE" ]; then
      for package in $(echo $PIP_EXTRA_PACKAGE | tr ";" "\n"); do
        checkVersionFromPip $package
      done
    fi
  fi
}

###
# @param bin
###
function check() {
  if [ -z "$CHECK_VERSION" ]; then 
    CHECK_VERSION=1
  fi

  if [ -z "$INSTALL_NAME" ]; then
    INSTALL_NAME="$NAME"
  fi

  if [ -z "$PACKAGE_NAME" ]; then
      PACKAGE_NAME="$INSTALL_NAME";
  fi;
  checkInstalled $INSTALL_NAME

  if [ $? = 0 ]; then
    if [ $GROUP -eq 1 ]; then 
      printf "  "
    fi
    installed $NAME "$INSTALL_DESCRIPTION" $NAME_MAX_SIZE
    if [ $CHECK_VERSION -ne 0 ]; then 
      checkVersion
    fi
  else
    if [ $GROUP -eq 1 ]; then 
      printf "  "
    fi
    uninstalled $NAME "$INSTALL_DESCRIPTION" $NAME_MAX_SIZE
  fi;
}

setup_vars() {
  if [ -z "$INSTALL_PATH" ]; then
    INSTALL_PATH="/usr/local/bin"
  fi
}

clean_vars() {
  unset NAME;
  # Pre Install vars
  unset PRE_PACKAGE_NAME;
  # Install vars
  unset INSTALL_NAME;
  unset PACKAGE_NAME;
  unset INSTALL_DESCRIPTION;
  unset INSTALL_URL;
  unset INSTALL_DOC;
  unset INSTALL_REPOSITORY_URL;
  unset INSTALL_COMMAND;
  unset PACKAGE_NAME_EXTRA;
  unset INSTALL_PPA;
  unset INSTALL_PACKAGE_REQUIRE;
  unset INSTALL_REPOSITORY_DISTRO;
  unset INSTALL_REPOSITORY_COMPONENT;
  unset GPG_PUBLIC_KEYS;
  unset INSTALL_REPOSITORY_ARCH;
  unset GITHUB_REPO;
  unset GITHUB_RELEASE_NAME;
  unset INSTALL_REPOSITORY_KEY;
  unset PIP_PACKAGE;
  unset INSTALL_REPOSITORY_NAME;
  unset INSTALL_SOURCE;
  unset INSTALL_SUBDIR_PATH;
  unset CHECK_VERSION;
  unset PIP_EXTRA_PACKAGE;
  unset TMP_NAME_MAX_SIZE
  # This vars are use to get last version from an api
  unset VERSION_INFO_URL;
  unset VERSION_INFO_JQ;
  # This vars is used to get the zip or tar.gz
  # You can replace the version by --VERSION--
  unset ARCHIVE_URL;
  unset ARCHIVE_SUB_PATH;
  unset ARCHIVE_BIN_NAME;
  # 
  unset INSTALL_PATH;

  unset VERSION_CLI_OPTIONS;
}

clean_dependency_vars() {
  unset DEPENDENCY_NAME;
  unset DEPENDENCY_PACKAGE_NAME;
  unset DEPENDENCY_DESCRIPTION;
}

GROUP=0
NAME_MAX_SIZE=0

if ! which jq > /dev/null; then
	writeBold "Required package" 
	NAME="jq"
	INSTALL_DESCRIPTION="How read json in bash"
  setup_vars
	check
  installation
  clean_vars;
	exit 
fi

if ! which curl > /dev/null; then
	writeBold "Required package"
  NAME="curl"
  INSTALL_DESCRIPTION="How call http in bash"
  setup_vars
  check
  installation
  clean_vars;
  exit
fi

if ! which stow > /dev/null; then
	writeBold "Required package"
  NAME="stow"
  INSTALL_DESCRIPTION="Manage dotfil"
  setup_vars
  check
  installation
  clean_vars;
  exit
fi

listPackage() {
  NAME_MAX_SIZE=0
  for file in $1
  do
    NAME=$(basename $file);
    NAME=${NAME%.install}
    if [ $NAME_MAX_SIZE -le ${#NAME}  ]; then 
      NAME_MAX_SIZE=${#NAME}
    fi
    if [ -d $file ]; then 
      NAME_MAX_SIZE=$(($NAME_MAX_SIZE+2))
    fi
  done

  for file in $1
  do
    if [ -f $file ]; then
      NAME=$(basename $file);
      NAME=${NAME%.install}
      source $file;
      setup_vars
	    if [ -f $file.$DISTRIB_ID-$DISTRIB_CODENAME ]; then
	      source $file.$DISTRIB_ID-$DISTRIB_CODENAME
	    fi
      check
      clean_vars;
      if [ -d $file.d ]; then
        GROUP=1
        for file2 in $file.d/*.install
        do
          NAME=$(basename $file2);
          NAME=${NAME%.install}
          source $file2;
          TMP_NAME_MAX_SIZE=$NAME_MAX_SIZE
          NAME_MAX_SIZE=$(($NAME_MAX_SIZE-1))
          check
          NAME_MAX_SIZE=$TMP_NAME_MAX_SIZE
          clean_vars;
        done
        GROUP=0
      fi
    elif [ -d $file ] && [[ $file == *install ]]; then
      NAME=$(basename $file);
      NAME=${NAME%.install}
      echo -e "$char_DINGBAT $(writeBold ${NAME})"
      GROUP=1
      for file2 in $file/*.install
      do
        NAME=$(basename $file2);
        NAME=${NAME%.install}
        source $file2;
        TMP_NAME_MAX_SIZE=$NAME_MAX_SIZE
        NAME_MAX_SIZE=$(($NAME_MAX_SIZE-1))
        check
        NAME_MAX_SIZE=$TMP_NAME_MAX_SIZE
        clean_vars;
      done
      GROUP=0
    fi
  done
}

if [ -z "$1" ]; then 
  listPackage "$DIRECTORY/list/*.install"
else
  PATH_FILE="$DIRECTORY/list/$1";
  if [[ $1 == *"/"* ]]; then 
    IFS='/' read -r -a split <<< "$1"
    PATH_FILE="$DIRECTORY/list/${split[0]}.install/${split[1]}"
  fi

  if [ -d "$PATH_FILE.install" ]; then 
    listPackage "$PATH_FILE.install/*.install"
    exit 0
  fi

  if [ -f $PATH_FILE.install ]; then
    NAME=$(basename $PATH_FILE.install);
    NAME=${NAME%.install}

    NAME_MAX_SIZE=${#NAME}

    source $PATH_FILE.install;
    setup_vars

    if [ -f $PATH_FILE.install.$DISTRIB_ID ]; then
        source $PATH_FILE.install.$DISTRIB_ID
    fi

    if [ -f $PATH_FILE.install.$DISTRIB_ID-$DISTRIB_CODENAME ]; then
        source $PATH_FILE.install.$DISTRIB_ID-$DISTRIB_CODENAME
    fi
    check

    if [ -n "$INSTALL_DOC" ]; then
      echo "$CHAR_BOOK $INSTALL_DOC"
    fi;

    if [ -f "$PATH_FILE.pre_install" ] && [ $UNINSTALL -eq 0 ]; then
      source $PATH_FILE.pre_install
      preInstall
    fi
    if [ $UNINSTALL -eq 0 ]; then 
      installation
    else 
      uninstall
    fi

    if [ -f "$PATH_FILE.post_install" ]; then
      if [ $UNINSTALL -eq 0 ]; then 
        echo -e "$(writeUnderline 'Post install:')"
      else 
        echo -e "$(writeUnderline 'Post uninstall:')"
      fi
      $PATH_FILE.post_install "$NAME" "$PATH_FILE.install" $UNINSTALL
    fi

    clean_vars;
  else 
    echo -e "$(writeRed "Cannot found install for ${1}")";
    exit 1
  fi  
fi
